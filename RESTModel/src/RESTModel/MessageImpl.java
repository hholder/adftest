package RESTModel;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ProgrammaticEntityImpl;
import oracle.jbo.server.SparseArray;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 31 07:57:40 COT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MessageImpl extends ProgrammaticEntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Id;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MessageImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public Integer getId() {
        return (Integer) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Integer value) {
        setAttributeInternal(ID, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer id) {
        return new Key(new Object[] { id });
    }

    /**
     * postDataProvider - for custom java data source support.
     */
    @Override
    protected HashMap<String, Object> postDataProvider(int operationType, ArrayList retAttrNames) {
        switch (operationType) {
        case EntityImpl.DML_INSERT:
            System.out.println("Insert entity data into custom data sink.");
            return null;
        case EntityImpl.DML_UPDATE:
            System.out.println("Update modified entity data into custom data sink.");
            return null;
        case EntityImpl.DML_DELETE:
            System.out.println("Delete entity from custom data sink.");
            return null;
        }
        return null;
    }

    /**
     * getRowFromDataSource - for custom java data source support.
     */
    @Override
    protected List<SparseArray> getRowFromDataSource(HashMap<String, Object> origPrimaryKeyMap) {
        return null;
    }

    /**
     * lockDataProvider - for custom java data source support.
     */
    @Override
    protected void lockDataProvider(boolean lock) {
        super.lockDataProvider(lock);
    }

    /**
     * rollbackDataProvider - for custom java data source support.
     */
    @Override
    public void rollbackDataProvider() {
        super.rollbackDataProvider();
    }

    /**
     * commitDataProvider - for custom java data source support.
     */
    @Override
    public void commitDataProvider(ProgrammaticEntityImpl.CommitActionType commitActionType) {
        super.commitDataProvider(commitActionType);
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("RESTModel.Message");
    }
}

